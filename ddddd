----------
import java.io.*;
import java.nio.file.*;
import java.util.*;

public class RecursiveFolderDiffToText {

    public static void main(String[] args) throws IOException {
        Path folder1 = Paths.get("path/to/folder1"); // Replace with actual path
        Path folder2 = Paths.get("path/to/folder2"); // Replace with actual path
        Path outputFile = Paths.get("FileDifferences.txt");

        Map<String, Path> folder1Files = getAllFiles(folder1);
        Map<String, Path> folder2Files = getAllFiles(folder2);

        Set<String> allRelativePaths = new TreeSet<>();
        allRelativePaths.addAll(folder1Files.keySet());
        allRelativePaths.addAll(folder2Files.keySet());

        try (BufferedWriter writer = Files.newBufferedWriter(outputFile)) {
            for (String relativePath : allRelativePaths) {
                Path file1 = folder1Files.get(relativePath);
                Path file2 = folder2Files.get(relativePath);

                writer.write("\n===== Comparing: " + relativePath + " =====\n");

                if (file1 == null) {
                    writer.write("Only in folder2\n");
                } else if (file2 == null) {
                    writer.write("Only in folder1\n");
                } else {
                    writeLineDifferences(file1, file2, writer);
                }
            }

            System.out.println("Comparison written to " + outputFile.toAbsolutePath());
        }
    }

    private static Map<String, Path> getAllFiles(Path root) throws IOException {
        Map<String, Path> fileMap = new HashMap<>();
        if (!Files.exists(root)) return fileMap;

        Files.walk(root)
            .filter(Files::isRegularFile)
            .filter(path -> {
                String name = path.getFileName().toString().toLowerCase();
                return !name.endsWith(".xls") && !name.endsWith(".xlsx"); // Ignore Excel files
            })
            .forEach(path -> {
                String relative = root.relativize(path).toString().replace("\\", "/");
                fileMap.put(relative, path);
            });

        return fileMap;
    }

    private static void writeLineDifferences(Path file1, Path file2, BufferedWriter writer) throws IOException {
        try (
            BufferedReader reader1 = Files.newBufferedReader(file1);
            BufferedReader reader2 = Files.newBufferedReader(file2)
        ) {
            String line1, line2;
            int lineNum = 1;
            boolean diffFound = false;

            while ((line1 = reader1.readLine()) != null | (line2 = reader2.readLine()) != null) {
                if (!Objects.equals(line1, line2)) {
                    writer.write("Line " + lineNum + " differs:\n");
                    writer.write("  Folder1: " + (line1 != null ? line1 : "<no line>") + "\n");
                    writer.write("  Folder2: " + (line2 != null ? line2 : "<no line>") + "\n");
                    diffFound = true;
                }
                lineNum++;
            }

            if (!diffFound) {
                writer.write("No differences found.\n");
            }
        }
    }
}


-----





private static Map<String, Path> getAllFiles(Path root) throws IOException {
    Map<String, Path> fileMap = new HashMap<>();
    if (!Files.exists(root)) return fileMap;

    Files.walk(root)
        .filter(Files::isRegularFile)
        .filter(path -> {
            String name = path.getFileName().toString().toLowerCase();
            return !name.endsWith(".xls") && !name.endsWith(".xlsx");
        })
        .forEach(path -> {
            String relative = root.relativize(path).toString().replace("\\", "/");
            fileMap.put(relative, path);
        });

    return fileMap;
}






import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import java.time.Duration;

public class OutlookEmailAutomation {
    public static void main(String[] args) throws InterruptedException {
        // Set ChromeDriver path if not in system PATH
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--start-maximized");

        WebDriver driver = new ChromeDriver(options);
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));

        // Step 1: Login to Outlook Web
        driver.get("https://outlook.office.com/mail/");

        // Wait and perform login manually if MFA is enabled, or automate login if possible
        System.out.println("Please login manually if prompted... waiting 60 seconds.");
        Thread.sleep(60000); // Adjust or use WebDriverWait for better control

        // Step 2: Click on "New message"
        WebElement newMessageBtn = driver.findElement(By.cssSelector("button[aria-label='New mail']"));
        newMessageBtn.click();
        Thread.sleep(3000); // Wait for compose window

        // Step 3: Fill in the email fields
        driver.findElement(By.cssSelector("input[aria-label='To']")).sendKeys("recipient@example.com");
        driver.findElement(By.cssSelector("input[aria-label='Add a subject']")).sendKeys("Test Email from Selenium");
        driver.findElement(By.cssSelector("div[aria-label='Message body']")).sendKeys("This is an automated email sent using Selenium WebDriver in Java.");

        // Step 4: Click Send
        driver.findElement(By.cssSelector("button[aria-label='Send']")).click();

        System.out.println("Email sent successfully.");

        // Close browser
        Thread.sleep(5000);
        driver.quit();
    }
}

<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.19.1</version>
    </dependency>
</dependencies>
