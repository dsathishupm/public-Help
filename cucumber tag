import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;

/**
 * Utility class for managing Cucumber scenario tags and example values
 */
public class CucumberTagManager {
    
    private static final String SCENARIO_PATTERN = "^(\\s*)(Scenario|Scenario Outline)(:.*?)$";
    private static final String TAG_PATTERN = "^(\\s*)@.*$";
    private static final String EXAMPLES_PATTERN = "^(\\s*)Examples:.*$";
    private static final String PIPE_PATTERN = "^(\\s*)\\|.*\\|\\s*$";
    
    /**
     * Adds tags to scenarios in a feature file
     * @param filePath Path to the feature file
     * @param tags List of tags to add (without @ symbol)
     * @param scenarioName Optional scenario name filter (null to apply to all)
     * @param applyToOutlines Whether to apply to Scenario Outlines
     * @param applyToScenarios Whether to apply to regular Scenarios
     */
    public static void addTagsToScenarios(String filePath, List<String> tags, 
                                        String scenarioName, boolean applyToOutlines, 
                                        boolean applyToScenarios) throws IOException {
        
        List<String> lines = Files.readAllLines(Paths.get(filePath));
        List<String> modifiedLines = new ArrayList<>();
        
        Pattern scenarioPattern = Pattern.compile(SCENARIO_PATTERN);
        Pattern tagPattern = Pattern.compile(TAG_PATTERN);
        
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);
            Matcher scenarioMatcher = scenarioPattern.matcher(line);
            
            if (scenarioMatcher.matches()) {
                String indent = scenarioMatcher.group(1);
                String scenarioType = scenarioMatcher.group(2);
                String scenarioTitle = scenarioMatcher.group(3);
                
                // Check if we should apply tags to this scenario type
                boolean shouldApply = (scenarioType.equals("Scenario") && applyToScenarios) ||
                                    (scenarioType.equals("Scenario Outline") && applyToOutlines);
                
                // Check if scenario name filter matches
                if (scenarioName != null && !scenarioTitle.toLowerCase().contains(scenarioName.toLowerCase())) {
                    shouldApply = false;
                }
                
                if (shouldApply) {
                    // Check if there are existing tags on the previous line
                    boolean hasExistingTags = false;
                    if (i > 0) {
                        Matcher tagMatcher = tagPattern.matcher(lines.get(i - 1));
                        if (tagMatcher.matches()) {
                            hasExistingTags = true;
                        }
                    }
                    
                    // Add new tags
                    StringBuilder tagLine = new StringBuilder(indent);
                    for (String tag : tags) {
                        tagLine.append("@").append(tag).append(" ");
                    }
                    
                    if (hasExistingTags) {
                        // Append to existing tag line
                        String lastLine = modifiedLines.get(modifiedLines.size() - 1);
                        modifiedLines.set(modifiedLines.size() - 1, lastLine + " " + tagLine.toString().trim());
                    } else {
                        // Add new tag line before scenario
                        modifiedLines.add(tagLine.toString().trim());
                    }
                }
            }
            
            modifiedLines.add(line);
        }
        
        Files.write(Paths.get(filePath), modifiedLines);
    }
    
    /**
     * Modifies example values in a Scenario Outline
     * @param filePath Path to the feature file
     * @param scenarioName Name of the scenario outline to modify
     * @param columnName Name of the column to modify
     * @param oldValue Old value to replace
     * @param newValue New value to set
     */
    public static void modifyExampleValue(String filePath, String scenarioName, 
                                        String columnName, String oldValue, String newValue) throws IOException {
        
        List<String> lines = Files.readAllLines(Paths.get(filePath));
        List<String> modifiedLines = new ArrayList<>();
        
        Pattern scenarioPattern = Pattern.compile(SCENARIO_PATTERN);
        Pattern examplesPattern = Pattern.compile(EXAMPLES_PATTERN);
        Pattern pipePattern = Pattern.compile(PIPE_PATTERN);
        
        boolean inTargetScenario = false;
        boolean inExamplesSection = false;
        int columnIndex = -1;
        
        for (String line : lines) {
            Matcher scenarioMatcher = scenarioPattern.matcher(line);
            Matcher examplesMatcher = examplesPattern.matcher(line);
            Matcher pipeMatcher = pipePattern.matcher(line);
            
            // Check if we're entering a new scenario
            if (scenarioMatcher.matches()) {
                String scenarioTitle = scenarioMatcher.group(3);
                inTargetScenario = scenarioTitle.toLowerCase().contains(scenarioName.toLowerCase());
                inExamplesSection = false;
                columnIndex = -1;
            }
            
            // Check if we're entering examples section
            if (examplesMatcher.matches() && inTargetScenario) {
                inExamplesSection = true;
            }
            
            // Process table rows
            if (pipeMatcher.matches() && inTargetScenario && inExamplesSection) {
                String[] cells = line.split("\\|");
                
                // Find column index from header row
                if (columnIndex == -1) {
                    for (int i = 0; i < cells.length; i++) {
                        if (cells[i].trim().equals(columnName)) {
                            columnIndex = i;
                            break;
                        }
                    }
                } else {
                    // Modify the value in the target column
                    if (columnIndex < cells.length && cells[columnIndex].trim().equals(oldValue)) {
                        cells[columnIndex] = " " + newValue + " ";
                        line = String.join("|", cells);
                    }
                }
            }
            
            modifiedLines.add(line);
        }
        
        Files.write(Paths.get(filePath), modifiedLines);
    }
    
    /**
     * Adds or modifies example table with new data
     * @param filePath Path to the feature file
     * @param scenarioName Name of the scenario outline
     * @param headers List of column headers
     * @param rows List of data rows (each row is a list of values)
     */
    public static void addOrModifyExampleTable(String filePath, String scenarioName, 
                                             List<String> headers, List<List<String>> rows) throws IOException {
        
        List<String> lines = Files.readAllLines(Paths.get(filePath));
        List<String> modifiedLines = new ArrayList<>();
        
        Pattern scenarioPattern = Pattern.compile(SCENARIO_PATTERN);
        Pattern examplesPattern = Pattern.compile(EXAMPLES_PATTERN);
        
        boolean inTargetScenario = false;
        boolean foundExamples = false;
        String indent = "    ";
        
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);
            Matcher scenarioMatcher = scenarioPattern.matcher(line);
            Matcher examplesMatcher = examplesPattern.matcher(line);
            
            // Check if we're entering a new scenario
            if (scenarioMatcher.matches()) {
                String scenarioTitle = scenarioMatcher.group(3);
                inTargetScenario = scenarioTitle.toLowerCase().contains(scenarioName.toLowerCase());
                foundExamples = false;
                indent = scenarioMatcher.group(1) + "  ";
            }
            
            // If we find existing examples, skip until next scenario
            if (examplesMatcher.matches() && inTargetScenario) {
                foundExamples = true;
                modifiedLines.add(line);
                
                // Add header row
                StringBuilder headerRow = new StringBuilder(indent + "|");
                for (String header : headers) {
                    headerRow.append(" ").append(header).append(" |");
                }
                modifiedLines.add(headerRow.toString());
                
                // Add data rows
                for (List<String> row : rows) {
                    StringBuilder dataRow = new StringBuilder(indent + "|");
                    for (String cell : row) {
                        dataRow.append(" ").append(cell).append(" |");
                    }
                    modifiedLines.add(dataRow.toString());
                }
                
                // Skip existing example table
                i++;
                while (i < lines.size() && 
                       (lines.get(i).trim().startsWith("|") || lines.get(i).trim().isEmpty())) {
                    i++;
                }
                i--; // Adjust for the increment in the for loop
                continue;
            }
            
            // If we're at the end of a target scenario without examples, add them
            if (inTargetScenario && !foundExamples && 
                (i == lines.size() - 1 || 
                 (i + 1 < lines.size() && scenarioPattern.matcher(lines.get(i + 1)).matches()))) {
                
                modifiedLines.add(line);
                modifiedLines.add("");
                modifiedLines.add(indent + "Examples:");
                
                // Add header row
                StringBuilder headerRow = new StringBuilder(indent + "  |");
                for (String header : headers) {
                    headerRow.append(" ").append(header).append(" |");
                }
                modifiedLines.add(headerRow.toString());
                
                // Add data rows
                for (List<String> row : rows) {
                    StringBuilder dataRow = new StringBuilder(indent + "  |");
                    for (String cell : row) {
                        dataRow.append(" ").append(cell).append(" |");
                    }
                    modifiedLines.add(dataRow.toString());
                }
                continue;
            }
            
            modifiedLines.add(line);
        }
        
        Files.write(Paths.get(filePath), modifiedLines);
    }
    
    /**
     * Main method demonstrating usage
     */
    public static void main(String[] args) {
        try {
            String featureFile = "sample.feature";
            
            // Example 1: Add tags to all scenarios
            List<String> tags = Arrays.asList("smoke", "regression");
            addTagsToScenarios(featureFile, tags, null, true, true);
            System.out.println("Added tags to all scenarios");
            
            // Example 2: Add tags to specific scenario
            List<String> specificTags = Arrays.asList("critical");
            addTagsToScenarios(featureFile, specificTags, "Login", true, true);
            System.out.println("Added tags to Login scenarios");
            
            // Example 3: Modify example value
            modifyExampleValue(featureFile, "Login", "username", "oldUser", "newUser");
            System.out.println("Modified example value");
            
            // Example 4: Add new example table
            List<String> headers = Arrays.asList("username", "password", "expected");
            List<List<String>> rows = Arrays.asList(
                Arrays.asList("user1", "pass1", "success"),
                Arrays.asList("user2", "pass2", "failure")
            );
            addOrModifyExampleTable(featureFile, "Registration", headers, rows);
            System.out.println("Added example table");
            
        } catch (IOException e) {
            System.err.println("Error processing feature file: " + e.getMessage());
        }
    }
    
    /**
     * Utility method to create a sample feature file for testing
     */
    public static void createSampleFeatureFile(String filePath) throws IOException {
        List<String> sampleContent = Arrays.asList(
            "Feature: User Authentication",
            "",
            "  @existing",
            "  Scenario: Valid Login",
            "    Given user is on login page",
            "    When user enters valid credentials",
            "    Then user should be logged in",
            "",
            "  Scenario Outline: Multiple Login Attempts",
            "    Given user is on login page",
            "    When user enters <username> and <password>",
            "    Then result should be <expected>",
            "",
            "    Examples:",
            "      | username | password | expected |",
            "      | valid    | valid    | success  |",
            "      | invalid  | invalid  | failure  |",
            "",
            "  Scenario: Registration Process",
            "    Given user is on registration page",
            "    When user fills registration form",
            "    Then user account should be created"
        );
        
        Files.write(Paths.get(filePath), sampleContent);
    }
}